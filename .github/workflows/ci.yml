name: Build, Push, and Deploy via AWS SSM

on:
  push:
    branches:
      - release/development

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-southeast-3
      ECR_REGISTRY: 396541281118.dkr.ecr.ap-southeast-3.amazonaws.com
      ECR_REPOSITORY: manapay/transaction-service
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        run: |
          docker build \
            --build-arg APP_NAME="${{ vars.APP_NAME }}" \
            --build-arg NODE_ENV="${{ vars.NODE_ENV }}" \
            --build-arg PORT="${{ vars.PORT }}" \
            --build-arg PORT_TCP="${{ vars.PORT_TCP }}" \
            --build-arg VERSION="${{ vars.VERSION }}" \
            --build-arg DATABASE_URL="${{ vars.DATABASE_URL }}" \
            --build-arg JWT_ACCESS_TOKEN_SECRET="${{ secrets.JWT_ACCESS_TOKEN_SECRET }}" \
            --build-arg JWT_ACCESS_TOKEN_EXPIRE="${{ vars.JWT_ACCESS_TOKEN_EXPIRE }}" \
            --build-arg JWT_REFRESH_TOKEN_SECRET="${{ secrets.JWT_REFRESH_TOKEN_SECRET }}" \
            --build-arg JWT_REFRESH_TOKEN_EXPIRE="${{ vars.JWT_REFRESH_TOKEN_EXPIRE }}" \
            --build-arg TIMEZONE="${{ vars.TIMEZONE }}" \
            --build-arg ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}" \
            --build-arg URL_AUTH="${{ vars.URL_AUTH }}" \
            --build-arg URL_CONFIG="${{ vars.URL_CONFIG }}" \
            --build-arg URL_TRANSACTION="${{ vars.URL_TRANSACTION }}" \
            --build-arg URL_SETTLERECON="${{ vars.URL_SETTLERECON }}" \
            --build-arg CLIENT_AUTH_NAME="${{ vars.CLIENT_AUTH_NAME }}" \
            --build-arg CLIENT_AUTH_HOST="${{ vars.CLIENT_AUTH_HOST }}" \
            --build-arg CLIENT_AUTH_PORT="${{ vars.CLIENT_AUTH_PORT }}" \
            --build-arg CLIENT_CONFIG_NAME="${{ vars.CLIENT_CONFIG_NAME }}" \
            --build-arg CLIENT_CONFIG_HOST="${{ vars.CLIENT_CONFIG_HOST }}" \
            --build-arg CLIENT_CONFIG_PORT="${{ vars.CLIENT_CONFIG_PORT }}" \
            --build-arg CLIENT_TRANSACTION_NAME="${{ vars.CLIENT_TRANSACTION_NAME }}" \
            --build-arg CLIENT_TRANSACTION_HOST="${{ vars.CLIENT_TRANSACTION_HOST }}" \
            --build-arg CLIENT_TRANSACTION_PORT="${{ vars.CLIENT_TRANSACTION_PORT }}" \
            --build-arg CLIENT_SETTLERECON_NAME="${{ vars.CLIENT_SETTLERECON_NAME }}" \
            --build-arg CLIENT_SETTLERECON_HOST="${{ vars.CLIENT_SETTLERECON_HOST }}" \
            --build-arg CLIENT_SETTLERECON_PORT="${{ vars.CLIENT_SETTLERECON_PORT }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest


      - name: Output image name for next job
        id: image
        run: echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy Updated Container to EC2 via SSM
    runs-on: ubuntu-latest
    needs: build-and-push

    env:
      AWS_REGION: ap-southeast-3
      EC2_INSTANCE_ID: i-04cd5f9debbd80954       
      SERVICE_NAME: transaction-service               
      ECR_REGISTRY: 396541281118.dkr.ecr.ap-southeast-3.amazonaws.com

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Send SSM command to update container
        run: |
          aws ssm send-command \
            --region $AWS_REGION \
            --instance-ids "$EC2_INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy updated $SERVICE_NAME container" \
            --parameters '{"commands":[
              "cd /home/ec2-user/app/",
              "aws ecr get-login-password --region '$AWS_REGION' | docker login --username AWS --password-stdin '$ECR_REGISTRY'",
              "docker-compose pull '$SERVICE_NAME'",
              "docker-compose up -d '$SERVICE_NAME'"
            ]}'
