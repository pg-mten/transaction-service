// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["transaction"]
}

model TopUpTransaction {
  id                Int                   @id @default(autoincrement())
  code              String                @unique @default(uuid())
  merchantId        Int
  externalId        String?
  referenceId       String                @unique //reff id from bank
  nominal           Decimal
  netNominal        Decimal
  status            TransactionStatusEnum @default(PENDING)
  providerName      String
  paymentMethodName String //transfer_bank, virtual_account
  receiptImage      String
  metadata          Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  merchantBalanceLog MerchantBalanceLog[]
  agentBalanceLog    AgentBalanceLog[]
  internalBalanceLog InternalBalanceLog[]
  feeDetails         TopupFeeDetail[]

  @@index([referenceId])
  @@index([merchantId])
  @@schema("transaction")
}

model TopupFeeDetail {
  id            Int         @id @default(autoincrement())
  agentId       Int?
  topupId       Int
  type          FeeTypeEnum
  nominal       Decimal
  feeFixed      Decimal
  feePercentage Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  topUpTransation TopUpTransaction @relation(fields: [topupId], references: [id], onDelete: Cascade)

  @@index([topupId])
  @@schema("transaction")
}

model WithdrawTransaction {
  id                Int                   @id @default(autoincrement())
  code              String                @unique @default(uuid())
  externalId        String?
  merchantId        Int
  referenceId       String                @unique //reff id from bank
  nominal           Decimal
  netNominal        Decimal // nominal setelah dikenakan fee
  status            TransactionStatusEnum @default(PENDING)
  providerName      String
  paymentMethodName String // transfer_bank, virtual_account, dll
  metadata          Json?

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  // Relasi
  feeDetails         WithdrawFeeDetail[]
  MerchantBalanceLog MerchantBalanceLog[]
  AgentBalanceLog    AgentBalanceLog[]
  InternalBalanceLog InternalBalanceLog[]

  @@index([merchantId])
  @@index([status])
  @@schema("transaction")
}

model WithdrawFeeDetail {
  id            Int         @id @default(autoincrement())
  agentId       Int?
  withdrawId    Int
  type          FeeTypeEnum
  nominal       Decimal
  feeFixed      Decimal
  feePercentage Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  withdrawTransaction WithdrawTransaction @relation(fields: [withdrawId], references: [id], onDelete: Cascade)

  @@index([withdrawId])
  @@schema("transaction")
}

model DisbursementTransaction {
  id                Int                   @id @default(autoincrement())
  code              String                @unique @default(uuid())
  externalId        String?
  referenceId       String?
  merchantId        Int
  providerName      String
  recipientName     String // bisa merchant, agent, atau pihak ketiga
  recipientBankCode String
  recipientBankName String
  recipientAccount  String
  nominal           Decimal
  netNominal        Decimal
  status            TransactionStatusEnum @default(PENDING)
  paymentMethodName String
  metadata          Json?

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  // Relasi
  feeDetails         DisbursementFeeDetail[]
  MerchantBalanceLog MerchantBalanceLog[]
  AgentBalanceLog    AgentBalanceLog[]
  InternalBalanceLog InternalBalanceLog[]

  @@index([providerName])
  @@index([status])
  @@schema("transaction")
}

model DisbursementFeeDetail {
  id             Int         @id @default(autoincrement())
  agentId        Int?
  disbursementId Int
  type           FeeTypeEnum
  nominal        Decimal
  feeFixed       Decimal
  feePercentage  Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  disbursementTransaction DisbursementTransaction @relation(fields: [disbursementId], references: [id], onDelete: Cascade)

  @@index([disbursementId])
  @@schema("transaction")
}

model PurchaseTransaction {
  id                Int                   @id @default(autoincrement())
  code              String                @unique @default(uuid())
  referenceId       String?
  externalId        String?
  merchantId        Int
  providerName      String
  paymentMethodName String
  nominal           Decimal
  netNominal        Decimal
  status            TransactionStatusEnum @default(PENDING)
  metadata          Json?
  settlementAt      DateTime?
  reconciliationAt  DateTime?

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  // Relasi
  feeDetails         PurchaseFeeDetail[]
  webhookLogs        WebhookLog[]
  MerchantBalanceLog MerchantBalanceLog[]
  AgentBalanceLog    AgentBalanceLog[]
  InternalBalanceLog InternalBalanceLog[]

  @@index([merchantId])
  @@index([providerName])
  @@index([status])
  @@schema("transaction")
}

model PurchaseFeeDetail {
  id            Int         @id @default(autoincrement())
  agentId       Int?
  purchaseId    Int
  type          FeeTypeEnum
  nominal       Decimal
  feeFixed      Decimal
  feePercentage Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  // Relasi
  transaction PurchaseTransaction @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
  @@schema("transaction")
}

model WebhookLog {
  id              Int                 @id @default(autoincrement())
  transactionId   Int
  source          String // e.g. midtrans, xendit
  payload         Json
  rawSignature    String?
  receivedAt      DateTime            @default(now())
  transactionType TransactionTypeEnum

  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  deletedAt             DateTime?
  createdBy             Int?
  updatedBy             Int?
  PurchaseTransaction   PurchaseTransaction? @relation(fields: [purchaseTransactionId], references: [id])
  purchaseTransactionId Int?

  @@index([source])
  @@schema("transaction")
}

model TransactionAudit {
  id              Int                   @id @default(autoincrement())
  transactionId   Int
  oldStatus       TransactionStatusEnum
  newStatus       TransactionStatusEnum
  source          String // "webhook", "admin", etc
  changedAt       DateTime              @default(now())
  transactionType TransactionTypeEnum

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  @@index([transactionId])
  @@schema("transaction")
}

model MerchantBalanceLog {
  id              Int                 @id @default(autoincrement())
  topupId         Int?
  purchaseId      Int?
  withdrawId      Int?
  disbursementId  Int?
  merchantId      Int
  changeAmount    Decimal // nominal perubahan (positif / negatif)
  balanceActive   Decimal // saldo akhir merchant setelah perubahan
  balancePending  Decimal
  transactionType TransactionTypeEnum

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  topupTransaction        TopUpTransaction?        @relation(fields: [topupId], references: [id], onDelete: SetNull)
  purchaseTransaction     PurchaseTransaction?     @relation(fields: [purchaseId], references: [id], onDelete: SetNull)
  withdrawTransaction     WithdrawTransaction?     @relation(fields: [withdrawId], references: [id], onDelete: SetNull)
  disbursementTransaction DisbursementTransaction? @relation(fields: [disbursementId], references: [id], onDelete: SetNull)

  @@index([merchantId])
  @@index([topupId])
  @@index([purchaseId])
  @@index([withdrawId])
  @@index([disbursementId])
  @@schema("transaction")
}

model AgentBalanceLog {
  id              Int                 @id @default(autoincrement())
  topupId         Int?
  purchaseId      Int?
  withdrawId      Int?
  disbursementId  Int?
  agentId         Int
  changeAmount    Decimal // nominal perubahan (positif / negatif)
  balanceActive   Decimal // saldo akhir merchant setelah perubahan
  balancePending  Decimal
  transactionType TransactionTypeEnum

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  topupTransaction        TopUpTransaction?        @relation(fields: [topupId], references: [id], onDelete: SetNull)
  purchaseTransaction     PurchaseTransaction?     @relation(fields: [purchaseId], references: [id], onDelete: SetNull)
  withdrawTransaction     WithdrawTransaction?     @relation(fields: [withdrawId], references: [id], onDelete: SetNull)
  disbursementTransaction DisbursementTransaction? @relation(fields: [disbursementId], references: [id], onDelete: SetNull)

  @@index([agentId])
  @@index([topupId])
  @@index([purchaseId])
  @@index([withdrawId])
  @@index([disbursementId])
  @@schema("transaction")
}

model InternalBalanceLog {
  id                Int                 @id @default(autoincrement())
  topupId           Int?
  purchaseId        Int?
  withdrawId        Int?
  disbursementId    Int?
  merchantId        Int
  changeAmount      Decimal // nominal perubahan (positif / negatif)
  balanceActive     Decimal // saldo akhir merchant setelah perubahan
  balancePending    Decimal
  transactionType   TransactionTypeEnum
  providerName      String
  paymentMethodName String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  topupTransaction        TopUpTransaction?        @relation(fields: [topupId], references: [id], onDelete: SetNull)
  purchaseTransaction     PurchaseTransaction?     @relation(fields: [purchaseId], references: [id], onDelete: SetNull)
  withdrawTransaction     WithdrawTransaction?     @relation(fields: [withdrawId], references: [id], onDelete: SetNull)
  disbursementTransaction DisbursementTransaction? @relation(fields: [disbursementId], references: [id], onDelete: SetNull)

  @@index([topupId])
  @@index([purchaseId])
  @@index([withdrawId])
  @@index([disbursementId])
  @@schema("transaction")
}

enum TransactionStatusEnum {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
  CANCELLED

  @@schema("transaction")
}

enum FeeTypeEnum {
  AGENT
  INTERNAL
  PROVIDER
  MERCHANT

  @@schema("transaction")
}

enum TransactionTypeEnum {
  WITHDRAW
  TOPUP
  DISBURSEMENT
  PURCHASE
  SETTLEMENT_PURCHASE

  @@schema("transaction")
}
