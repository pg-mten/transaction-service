// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["transaction", "settlement"]
}

model TopUpTransaction {
  id          String                @id @default(uuid())
  merchantId  Int
  referenceId String                @unique //reff id from bank
  amount      Decimal
  status      TransactionStatusEnum @default(PENDING)
  method      String //transfer_bank, virtual_account
  metadata    Json?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  merchantBalanceLog MerchantBalanceLog[]
  agentBalanceLog    AgentBalanceLog[]
  feeDetails         TopupFeeDetail[]

  @@index([referenceId])
  @@index([merchantId])
  @@schema("transaction")
}

model TopupFeeDetail {
  id                 Int         @id @default(autoincrement())
  topupTransactionId String
  type               FeeTypeEnum
  amount             Decimal
  percentage         Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  topUpTransation TopUpTransaction @relation(fields: [topupTransactionId], references: [id], onDelete: Cascade)


  @@index([topupTransactionId])
  @@schema("transaction")
}

model WithdrawTransaction {
  id         String                @id @default(uuid())
  externalId String                @unique
  merchantId Int
  amount     Decimal
  netAmount  Decimal? // amount setelah dipotong fee
  status     TransactionStatusEnum @default(PENDING)
  method     String // transfer_bank, virtual_account, dll
  metadata   Json?

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  // Relasi
  feeDetails         WithdrawFeeDetail[]
  MerchantBalanceLog MerchantBalanceLog[]
  AgentBalanceLog    AgentBalanceLog[]

  @@index([merchantId])
  @@index([status])
  @@schema("transaction")
}

model WithdrawFeeDetail {
  id                    Int         @id @default(autoincrement())
  withdrawTransactionId String
  type                  FeeTypeEnum
  amount                Decimal
  percentage            Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  withdrawTransaction WithdrawTransaction @relation(fields: [withdrawTransactionId], references: [id], onDelete: Cascade)

  @@index([withdrawTransactionId])
  @@schema("transaction")
}

model DisbursementTransaction {
  id               String                @id @default(uuid())
  externalId       String                @unique
  provider         String
  recipientName    String // bisa merchant, agent, atau pihak ketiga
  recipientAccount String
  amount           Decimal
  netAmount        Decimal?
  status           TransactionStatusEnum @default(PENDING)
  method           String
  metadata         Json?

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  // Relasi
  feeDetails         DisbursementFeeDetail[]
  MerchantBalanceLog MerchantBalanceLog[]
  AgentBalanceLog    AgentBalanceLog[]

  @@index([provider])
  @@index([status])
  @@schema("transaction")
}

model DisbursementFeeDetail {
  id                        Int         @id @default(autoincrement())
  disbursementTransactionId String
  type                      FeeTypeEnum
  amount                    Decimal
  percentage                Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  disbursementTransaction DisbursementTransaction @relation(fields: [disbursementTransactionId], references: [id], onDelete: Cascade)

  @@index([disbursementTransactionId])
  @@schema("transaction")
}

model PurchaseTransaction {
  id               String                @id @default(uuid())
  externalId       String                @unique
  referenceId      String?
  merchantId       Int
  provider         String
  agentId          Int?
  amount           Decimal
  netAmount        Decimal?
  status           TransactionStatusEnum @default(PENDING)
  method           String
  metadata         Json?
  settlementAt     DateTime?
  reconciliationAt DateTime?

  // Audit fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  // Relasi
  feeDetails         FeeDetail[]
  webhookLogs        WebhookLog[]
  audits             PurchaseTransactionAudit[]
  MerchantBalanceLog MerchantBalanceLog[]
  AgentBalanceLog    AgentBalanceLog[]

  @@index([merchantId])
  @@index([provider])
  @@index([status])
  @@schema("transaction")
}

model FeeDetail {
  id                    Int         @id @default(autoincrement())
  purchaseTransactionId String
  type                  FeeTypeEnum
  amount                Decimal
  percentage            Decimal

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  // Relasi
  transaction PurchaseTransaction @relation(fields: [purchaseTransactionId], references: [id], onDelete: Cascade)

  @@index([purchaseTransactionId])
  @@schema("transaction")
}

model WebhookLog {
  id            Int      @id @default(autoincrement())
  transactionId String
  source        String // e.g. midtrans, xendit
  payload       Json
  rawSignature  String?
  receivedAt    DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  transaction PurchaseTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@index([source])
  @@schema("transaction")
}

model PurchaseTransactionAudit {
  id            Int                   @id @default(autoincrement())
  transactionId String
  oldStatus     TransactionStatusEnum
  newStatus     TransactionStatusEnum
  source        String // "webhook", "admin", etc
  changedAt     DateTime              @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  transaction PurchaseTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([transactionId])
  @@schema("transaction")
}

model MerchantBalanceLog {
  id             Int     @id @default(autoincrement())
  topupId        String?
  purchaseId     String?
  withdrawId     String?
  disbursementId String?
  merchantId     Int
  changeAmount   Decimal // nominal perubahan (positif / negatif)
  balanceAfter   Decimal // saldo akhir merchant setelah perubahan
  reason         String // e.g "TOP UP", "PURCHASE", "WITHDRAW", "DISBURSEMENt"

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  topupTransaction        TopUpTransaction?        @relation(fields: [topupId], references: [id], onDelete: SetNull)
  purchaseTransaction     PurchaseTransaction?     @relation(fields: [purchaseId], references: [id], onDelete: SetNull)
  withdrawTransaction     WithdrawTransaction?     @relation(fields: [withdrawId], references: [id], onDelete: SetNull)
  disbursementTransaction DisbursementTransaction? @relation(fields: [disbursementId], references: [id], onDelete: SetNull)

  @@index([merchantId])
  @@index([topupId])
  @@index([purchaseId])
  @@schema("transaction")
}

model AgentBalanceLog {
  id             Int     @id @default(autoincrement())
  topupId        String?
  purchaseId     String?
  withdrawId     String?
  disbursementId String?
  agentId        Int
  changeAmount   Decimal // nominal perubahan (positif / negatif)
  balanceAfter   Decimal // saldo akhir merchant setelah perubahan
  reason         String // e.g "TOP UP", "PURCHASE", "WITHDRAW", "DISBURSEMENt"

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?

  topupTransaction        TopUpTransaction?        @relation(fields: [topupId], references: [id], onDelete: SetNull)
  purchaseTransaction     PurchaseTransaction?     @relation(fields: [purchaseId], references: [id], onDelete: SetNull)
  withdrawTransaction     WithdrawTransaction?     @relation(fields: [withdrawId], references: [id], onDelete: SetNull)
  disbursementTransaction DisbursementTransaction? @relation(fields: [disbursementId], references: [id], onDelete: SetNull)

  @@index([agentId])
  @@index([topupId])
  @@index([purchaseId])
  @@schema("transaction")
}

enum TransactionStatusEnum {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
  CANCELLED

  @@schema("transaction")
}

enum FeeTypeEnum {
  AGENT
  INTERNAL
  PROVIDER
  MERCHANT

  @@schema("transaction")
}
